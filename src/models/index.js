const { Sequelize, DataTypes } = require('sequelize');
const sequelize = require('../config/db');

console.log('=== MODEL Y√úKLEME BA≈ûLADI ===');

try {
  // üî• KONSISTEN MODEL Y√úKLEME - HEPSƒ∞ AYNI Y√ñNTEMƒ∞ KULLANIYOR
  
  // Direkt export edilenler (sequelize.define ile tanƒ±mlanmƒ±≈ü)
  const User = require('./User');
  const UserProfile = require('./UserProfile');
  const Location = require('./Location');
  const PackageCategory = require('./PackageCategory');
  const PackageImage = require('./PackageImage');
  const PackageAvailability = require('./PackageAvailability');
  const Seller = require('./Seller'); // üî• ARTIK Dƒ∞REKT IMPORT

  // Function olarak export edilenler (sequelize, DataTypes parametreli)
  const FoodPackage = require('./FoodPackage')(sequelize, DataTypes);
  const PackageLocation = require('./PackageLocation')(sequelize, DataTypes);
  const PackageOrder = require('./PackageOrder')(sequelize, DataTypes);
  const CartItem = require('./CartItem')(sequelize, DataTypes);
  const Order = require('./Order')(sequelize, DataTypes);
  const OrderItem = require('./OrderItem')(sequelize, DataTypes);
  const OrderStatusHistory = require('./OrderStatusHistory')(sequelize, DataTypes);
  const Review = require('./Review')(sequelize, DataTypes);
 

  // üî• T√úM MODELLERƒ∞ Bƒ∞R OBJEDE TOPLUYORUZ
  const models = {
    Sequelize,
    sequelize,
    User,
    UserProfile,
    Location,
    Seller, // üî• D√úZELTƒ∞LDƒ∞
    FoodPackage,
    PackageCategory,
    PackageImage,
    PackageAvailability,
    PackageLocation,
    PackageOrder,
    CartItem,
    Order,
    OrderItem,
    OrderStatusHistory,
    Review
  };

  // üî• DEBUG: Hangi modellerin y√ºklendiƒüini kontrol et
  console.log('\n=== Y√úKLENEN MODELLER ===');
  Object.keys(models).forEach(modelName => {
    if (modelName !== 'Sequelize' && modelName !== 'sequelize') {
      const model = models[modelName];
      const isSequelizeModel = model && typeof model.findAll === 'function';
      const hasAssociate = model && typeof model.associate === 'function';
      console.log(`${modelName}: ${isSequelizeModel ? '‚úÖ' : '‚ùå'} Model | ${hasAssociate ? 'üîó' : '‚ö™'} Associate`);
    }
  });

  // üî• ASSOCIATION KURMA
  console.log('\n=== ASSOCIATION KURMA BA≈ûLADI ===');
  
  Object.keys(models).forEach(modelName => {
    if (modelName !== 'Sequelize' && modelName !== 'sequelize') {
      const model = models[modelName];
      if (model && typeof model.associate === 'function') {
        console.log(`üîó ${modelName} associations kuruluyor...`);
        try {
          model.associate(models);
          console.log(`‚úÖ ${modelName} associations kuruldu`);
        } catch (assocError) {
          console.error(`‚ùå ${modelName} association hatasƒ±:`, assocError.message);
        }
      }
    }
  });

  // üî• KRƒ∞Tƒ∞K ƒ∞Lƒ∞≈ûKƒ∞LERƒ∞ MANUEL KONTROL ET VE YOKSA KUR
  console.log('\n=== KRƒ∞Tƒ∞K ƒ∞Lƒ∞≈ûKƒ∞LER KONTROL EDƒ∞Lƒ∞YOR ===');

  // Order -> Seller ili≈ükisi (EN √ñNEMLƒ∞Sƒ∞)
  if (!models.Order.associations?.seller) {
    console.log('‚ö†Ô∏è Order -> Seller ili≈ükisi eksik, manuel kuruluyor...');
    models.Order.belongsTo(models.Seller, {
      foreignKey: 'seller_id',
      as: 'seller'
    });
    console.log('‚úÖ Order -> Seller ili≈ükisi manuel kuruldu');
  }

  // Seller -> User ili≈ükisi
  if (!models.Seller.associations?.user) {
    console.log('‚ö†Ô∏è Seller -> User ili≈ükisi eksik, manuel kuruluyor...');
    models.Seller.belongsTo(models.User, {
      foreignKey: 'user_id',
      as: 'user'
    });
    console.log('‚úÖ Seller -> User ili≈ükisi manuel kuruldu');
  }

  // Order -> User ili≈ükisi
  if (!models.Order.associations?.user) {
    models.Order.belongsTo(models.User, {
      foreignKey: 'user_id',
      as: 'user'
    });
    console.log('‚úÖ Order -> User ili≈ükisi manuel kuruldu');
  }

  // Order -> OrderItem ili≈ükisi
  if (!models.Order.associations?.items) {
    models.Order.hasMany(models.OrderItem, {
      foreignKey: 'order_id',
      as: 'items'
    });
    console.log('‚úÖ Order -> OrderItem ili≈ükisi manuel kuruldu');
  }

  // OrderItem -> FoodPackage ili≈ükisi
  if (models.OrderItem && !models.OrderItem.associations?.package) {
    models.OrderItem.belongsTo(models.FoodPackage, {
      foreignKey: 'package_id',
      as: 'package'
    });
    console.log('‚úÖ OrderItem -> FoodPackage ili≈ükisi manuel kuruldu');
  }

  // üî• ASSOCIATIONs KONTROL√ú
  console.log('\n=== ASSOCIATION KONTROL√ú ===');
  ['Order', 'Seller', 'User', 'OrderItem'].forEach(modelName => {
    const model = models[modelName];
    if (model && model.associations) {
      const assocNames = Object.keys(model.associations);
      console.log(`${modelName}: ${assocNames.join(', ')}`);
    } else {
      console.log(`${modelName}: ‚ùå Association yok`);
    }
  });

  console.log('\n=== MODEL Y√úKLEME TAMAMLANDI ===');
  module.exports = models;

} catch (loadError) {
  console.error('‚ùå Model y√ºkleme hatasƒ±:', loadError);
  process.exit(1);
}